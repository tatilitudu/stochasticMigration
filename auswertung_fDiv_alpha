#!/usr/bin/python
# -*- coding: utf-8 -*-


# Bibliotheken importieren
import os
import re
import glob	

#import prettyplotlib as ppl	
import numpy as np

# This is "import matplotlib.pyplot as plt" from the prettyplotlib library
import matplotlib.pyplot as plt

# This is "import matplotlib as mpl" from the prettyplotlib library
import matplotlib as mpl

# change directory
os.chdir("/home/tatjana/Arbeitsfläche/MichaelasProgramm/mitBEF/Output")



alpha_value = []

# hashs initialisieren
F = {}
M = {}
I = {}
R = {}
B = {}
A = {}

# alle files in directory durchgehene
for filename in glob.glob('*'):
  #print filename
   
   # oeffnen zum lesen
  file = open(filename,'r')
   
   # liest Zeilen ein --> erster Aufruf = erste Zeile
  file.readline()
   
   # zweiter Aufruf = liest zweite Zeile ein
  content = file.readline()

  # Alle Zahlen aus der zweiten Zeile in einem Array speichern --> werden aber so als string gespeichert
  narr = re.findall(r"[-+]?\d*\.\d+|\d+", content)

  
  # Zahlen als float in einem Array speichern
  n = []  
  for i in narr:
    try:
      n.append(float(i))
    except ValueError,e:
      print(e)
      print "Digit: " + i
      
  #print n
  
  # Länge von n bestimmen
  l = len(n)
  
  #print l
  
  # wenn alpha mit in der Datei steht 
  if(l>73):
    alphatemp = n[74]
      
    # zum Aufruf mit hash braucht man strings
    # umwandeln zu strings
    alphatemp = str(alphatemp)
    
    #speichern aller Werte vo alpha
    if not alphatemp in alpha_value:
      alpha_value.append(alphatemp)
      
    #print alphatemp
    
    # wird das alpha zum ersten Mal aufgerufen muss der hash initialisiert werden
    if not alphatemp in F:
      F[alphatemp] = []
      M[alphatemp] = []
      I[alphatemp] = []
      R[alphatemp] = []
      B[alphatemp] = []
      A[alphatemp] = []
    
    # anhängen der Werte an den jeweiligen hash
    F[alphatemp].append(n[73])
    M[alphatemp].append(n[70])
    I[alphatemp].append(n[72])
    R[alphatemp].append(n[71])
    B[alphatemp].append(n[29])
    A[alphatemp].append(n[17])  
  



# sortieren der Werte für alpha nach Größe
alpha_value.sort()
#print alpha_value
alpha_value = ['0.2','0.6','1.0']
      
# Farben festlegen
colors=['b','c','y','m','r','g']

# Laufparameter
co = 0

### plot für Functional Diversity
ax = plt.subplot(2,3,1)
for j in alpha_value:
  plt.scatter(F[j], A[j],color=colors[co],s=5)
  co+=1
plt.legend(('0.2','0.6','1.0','1.4'),loc='upper left',prop={'size':5})

# Beschriftung fuer plot
plt.xlabel('Functional Diversity')
plt.ylabel('Number of Species')



### plot für Metabolic Loss
fig = plt.subplot(2,3,5)
co =0
for j in alpha_value:
  plt.scatter(F[j], M[j],color=colors[co],s=5)
  co+=1
plt.legend(('0.2','0.6','1.0','1.4'),loc='upper left',prop={'size':5})

# Beschriftung fuer plot
plt.xlabel('Functional Diversity')
plt.ylabel('Metabolic Loss')

#plt.show()

### plot für intraguild Predation
ax = plt.subplot(2,3,4)
co=0
for j in alpha_value:
  plt.scatter(F[j], I[j],color=colors[co],s=5)
  co+=1
plt.legend(('0.2','0.6','1.0','1.4'),loc='upper left',prop={'size':5})
plt.yscale("log")
# Beschriftung fuer plot
plt.xlabel('Functional Diversity')
plt.ylabel('Intraguild Predation')


### plot für Predation on Resource
ax = plt.subplot(2,3,3)
co=0
for j in alpha_value:
  plt.scatter(F[j], R[j],color=colors[co],s=5)
  co+=1
plt.legend(('0.2','0.6','1.0','1.4'),loc='upper left',prop={'size':5})

# Beschriftung fuer plot
plt.xlabel('Functional Diversity')
plt.ylabel('Predation on Resource')


### plot für Consumer Biomass
ax = plt.subplot(2,3,2)
co=0
for j in alpha_value:
  plt.scatter(F[j], B[j],color=colors[co],s=5)
  co+=1
plt.legend(('0.2','0.6','1.0','1.4'),loc='upper left',prop={'size':5})

# Beschriftung fuer plot
plt.xlabel('Functional Diversity')
plt.ylabel('Consumer Biomass')

plt.subplots_adjust(left=None, bottom=None, right=None, top=None, wspace=0.5, hspace=0.3)
plt.title('linkwise x=0 Y=4 d=0 T=0 L=1  \n')
#plt.show()
os.chdir("/home/tatjana/Arbeitsfläche/MichaelasProgramm/mitBEF/Graphen")
plt.savefig('BEF_fDiv_alpha_new.png',dpi=300)
